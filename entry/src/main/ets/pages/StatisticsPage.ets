import router from '@ohos.router';
import promptAction from '@ohos.promptAction';
import { TabBar } from '../components/TabBar';

@Entry
@Component
struct StatisticsPage {
  @State currentTab: number = 0;
  @State totalFocusTime: number = 0;
  @State totalFocusCount: number = 0;
  @State continuousDays: number = 0;
  @State totalDays: number = 0;
  @State weeklyData: number[] = [120, 180, 90, 150, 200, 160, 140];
  @State monthlyData: number[] = Array(30).fill(0).map(() => Math.floor(Math.random() * 200));
  @State yearlyData: number[] = Array(12).fill(0).map(() => Math.floor(Math.random() * 1000));

  aboutToAppear() {
    // Ê®°ÊãüÂä†ËΩΩÊï∞ÊçÆ
    this.loadStatisticsData();
  }

  loadStatisticsData() {
    // Ê®°Êãü‰ªéÂêéÁ´ØËé∑ÂèñÊï∞ÊçÆ
    this.totalFocusTime = 3600; // 60Â∞èÊó∂
    this.totalFocusCount = 24;
    this.continuousDays = 7;
    this.totalDays = 30;
  }

  formatTime(minutes: number): string {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return `${hours}Â∞èÊó∂${mins}ÂàÜÈíü`;
  }

  build() {
    Column() {
      // È°∂ÈÉ®Ê†áÈ¢òÊ†è
      Row() {
        Image('/common/images/back.png')
          .width(24)
          .height(24)
          .margin({ left: 16 })
          .onClick(() => {
            router.back();
          })

        Text('‰∏ìÊ≥®ÁªüËÆ°')
          .fontSize(20)
          .fontWeight(FontWeight.Bold)
          .fontColor('#333333')
          .margin({ left: 16 })

        Blank()

        Text('üìä')
          .fontSize(24)
          .fontColor('#333333')
          .margin({ right: 16 })
      }
      .width('100%')
      .height(56)
      .backgroundColor('#FFFFFF')

      // ÁªüËÆ°Âç°Áâá
      Column() {
        // ÊÄªËßàÊï∞ÊçÆ
        Row() {
          Column() {
            Text(this.totalFocusTime.toString())
              .fontSize(32)
              .fontWeight(FontWeight.Bold)
              .fontColor('#8A2BE2')
            Text('ÊÄª‰∏ìÊ≥®Êó∂ÈïøÔºàÂàÜÈíüÔºâ')
              .fontSize(14)
              .fontColor('#666666')
              .margin({ top: 4 })
          }
          .layoutWeight(1)
          .alignItems(HorizontalAlign.Center)

          Column() {
            Text(this.totalFocusCount.toString())
              .fontSize(32)
              .fontWeight(FontWeight.Bold)
              .fontColor('#8A2BE2')
            Text('‰∏ìÊ≥®Ê¨°Êï∞')
              .fontSize(14)
              .fontColor('#666666')
              .margin({ top: 4 })
          }
          .layoutWeight(1)
          .alignItems(HorizontalAlign.Center)

          Column() {
            Text(this.continuousDays.toString())
              .fontSize(32)
              .fontWeight(FontWeight.Bold)
              .fontColor('#8A2BE2')
            Text('ËøûÁª≠Â§©Êï∞')
              .fontSize(14)
              .fontColor('#666666')
              .margin({ top: 4 })
          }
          .layoutWeight(1)
          .alignItems(HorizontalAlign.Center)
        }
        .width('100%')
        .padding(16)
        .backgroundColor('#FFFFFF')
        .borderRadius(8)
        .margin({ top: 16 })

        // Êó∂Èó¥ËåÉÂõ¥ÈÄâÊã©
        Row() {
          Text('Âë®')
            .fontSize(16)
            .fontColor(this.currentTab === 0 ? '#8A2BE2' : '#666666')
            .fontWeight(this.currentTab === 0 ? FontWeight.Bold : FontWeight.Normal)
            .padding({ left: 16, right: 16, top: 8, bottom: 8 })
            .backgroundColor(this.currentTab === 0 ? '#F0E6FF' : 'transparent')
            .borderRadius(16)
            .onClick(() => {
              this.currentTab = 0;
            })

          Text('Êúà')
            .fontSize(16)
            .fontColor(this.currentTab === 1 ? '#8A2BE2' : '#666666')
            .fontWeight(this.currentTab === 1 ? FontWeight.Bold : FontWeight.Normal)
            .padding({ left: 16, right: 16, top: 8, bottom: 8 })
            .backgroundColor(this.currentTab === 1 ? '#F0E6FF' : 'transparent')
            .borderRadius(16)
            .onClick(() => {
              this.currentTab = 1;
            })

          Text('Âπ¥')
            .fontSize(16)
            .fontColor(this.currentTab === 2 ? '#8A2BE2' : '#666666')
            .fontWeight(this.currentTab === 2 ? FontWeight.Bold : FontWeight.Normal)
            .padding({ left: 16, right: 16, top: 8, bottom: 8 })
            .backgroundColor(this.currentTab === 2 ? '#F0E6FF' : 'transparent')
            .borderRadius(16)
            .onClick(() => {
              this.currentTab = 2;
            })
        }
        .width('100%')
        .justifyContent(FlexAlign.Center)
        .margin({ top: 24, bottom: 16 })

        // ÂõæË°®Âå∫Âüü
        Column() {
          if (this.currentTab === 0) {
            // Âë®ËßÜÂõæ
            Row() {
              ForEach(this.weeklyData, (value: number, index: number) => {
                Column() {
                  Text(value.toString())
                    .fontSize(12)
                    .fontColor('#666666')
                    .margin({ bottom: 4 })
                  Column()
                    .width(30)
                    .height(value)
                    .backgroundColor('#8A2BE2')
                    .borderRadius(4)
                  Text(['‰∏Ä', '‰∫å', '‰∏â', 'Âõõ', '‰∫î', 'ÂÖ≠', 'Êó•'][index])
                    .fontSize(12)
                    .fontColor('#666666')
                    .margin({ top: 4 })
                }
                .layoutWeight(1)
                .alignItems(HorizontalAlign.Center)
              })
            }
            .width('100%')
            .height(200)
            .padding(16)
          } else if (this.currentTab === 1) {
            // ÊúàËßÜÂõæ
            Grid() {
              ForEach(this.monthlyData, (value: number, index: number) => {
                GridItem() {
                  Column() {
                    Text(value.toString())
                      .fontSize(12)
                      .fontColor('#666666')
                      .margin({ bottom: 4 })
                    Column()
                      .width(20)
                      .height(value / 2)
                      .backgroundColor('#8A2BE2')
                      .borderRadius(4)
                    Text((index + 1).toString())
                      .fontSize(12)
                      .fontColor('#666666')
                      .margin({ top: 4 })
                  }
                  .width('100%')
                  .alignItems(HorizontalAlign.Center)
                }
              })
            }
            .columnsTemplate('1fr 1fr 1fr 1fr 1fr 1fr')
            .rowsTemplate('1fr 1fr 1fr 1fr 1fr')
            .width('100%')
            .height(300)
            .padding(16)
          } else {
            // Âπ¥ËßÜÂõæ
            Row() {
              ForEach(this.yearlyData, (value: number, index: number) => {
                Column() {
                  Text(value.toString())
                    .fontSize(12)
                    .fontColor('#666666')
                    .margin({ bottom: 4 })
                  Column()
                    .width(30)
                    .height(value / 5)
                    .backgroundColor('#8A2BE2')
                    .borderRadius(4)
                  Text((index + 1).toString() + 'Êúà')
                    .fontSize(12)
                    .fontColor('#666666')
                    .margin({ top: 4 })
                }
                .layoutWeight(1)
                .alignItems(HorizontalAlign.Center)
              })
            }
            .width('100%')
            .height(200)
            .padding(16)
          }
        }
        .width('100%')
        .backgroundColor('#FFFFFF')
        .borderRadius(8)
        .margin({ top: 16 })

        // ÊàêÂ∞±Â±ïÁ§∫
        Column() {
          Text('ÊàëÁöÑÊàêÂ∞±')
            .fontSize(18)
            .fontWeight(FontWeight.Bold)
            .fontColor('#333333')
            .margin({ bottom: 16 })

          Row() {
            Column() {
              Text('üéØ')
                .fontSize(32)
                .fontColor('#8A2BE2')
              Text('ËøûÁª≠‰∏ìÊ≥®7Â§©')
                .fontSize(14)
                .fontColor('#666666')
                .margin({ top: 8 })
            }
            .layoutWeight(1)
            .alignItems(HorizontalAlign.Center)

            Column() {
              Text('‚è∞')
                .fontSize(32)
                .fontColor('#8A2BE2')
              Text('Á¥ØËÆ°‰∏ìÊ≥®60Â∞èÊó∂')
                .fontSize(14)
                .fontColor('#666666')
                .margin({ top: 8 })
            }
            .layoutWeight(1)
            .alignItems(HorizontalAlign.Center)

            Column() {
              Text('üìÖ')
                .fontSize(32)
                .fontColor('#8A2BE2')
              Text('ÂùöÊåÅ30Â§©')
                .fontSize(14)
                .fontColor('#666666')
                .margin({ top: 8 })
            }
            .layoutWeight(1)
            .alignItems(HorizontalAlign.Center)
          }
        }
        .width('100%')
        .padding(16)
        .backgroundColor('#FFFFFF')
        .borderRadius(8)
        .margin({ top: 16, bottom: 16 })
      }
      .width('100%')
      .layoutWeight(1)
      .padding(16)
      .backgroundColor('#F8F8F8')

      // Â∫ïÈÉ®ÂØºËà™Ê†è
      TabBar({ currentIndex: 3 })
    }
    .width('100%')
    .height('100%')
  }
} 