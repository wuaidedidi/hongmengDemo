// Áªü‰∏ÄÁöÑÂæÖÂäûÁõ∏ÂÖ≥ÂØπËØùÊ°ÜÁªÑ‰ª∂

import promptAction from '@ohos.promptAction';
import { ThemeConfig } from '../../services/ThemeService';
import { CommonButton, ButtonPresets } from '../common/CommonButton';
import { UI_SIZES, FONT_SIZES, STRINGS } from '../../constants/AppConstants';

/**
 * Ê∑ªÂä†ÂæÖÂäûÂØπËØùÊ°Ü
 */
@CustomDialog
export struct AddTodoDialog {
  @State todoName: string = '';
  @State todoType: string = '';
  @State todoDuration: number = 25;
  @Prop currentTheme: ThemeConfig;
  
  onConfirm: (name: string, type: string, duration: number) => void = () => {};
  controller?: CustomDialogController;

  build() {
    Column({ space: 20 }) {
      Text('Ê∑ªÂä†Êñ∞ÂæÖÂäû')
        .fontSize(FONT_SIZES.TITLE_MEDIUM)
        .fontColor(this.currentTheme.textColor)
        .fontWeight(FontWeight.Bold)

      TextInput({ placeholder: "ÂæÖÂäûÂêçÁß∞", text: this.todoName })
        .onChange(val => this.todoName = val)
        .backgroundColor(this.currentTheme.glassmorphism.surfaceLight)
        .borderRadius(12)
        .fontColor(this.currentTheme.textColor)
        .height(48)

      TextInput({ placeholder: "ÂæÖÂäûÁ±ªÂûã", text: this.todoType })
        .onChange(val => this.todoType = val)
        .backgroundColor(this.currentTheme.glassmorphism.surfaceLight)
        .borderRadius(12)
        .fontColor(this.currentTheme.textColor)
        .height(48)

      Row() {
        Text('‰∏ìÊ≥®Êó∂Èïø:')
          .fontSize(FONT_SIZES.BODY_MEDIUM)
          .fontColor(this.currentTheme.textColor)
        
        Slider({
          value: this.todoDuration,
          min: 5,
          max: 120,
          step: 5
        })
          .width(120)
          .trackColor(this.currentTheme.glassmorphism.surfaceLight)
          .selectedColor(this.currentTheme.glassmorphism.accentPrimary)
          .onChange((value: number) => this.todoDuration = value)
        
        Text(`${this.todoDuration}ÂàÜÈíü`)
          .fontSize(FONT_SIZES.BODY_MEDIUM)
          .fontColor(this.currentTheme.textColor)
      }
      .justifyContent(FlexAlign.SpaceBetween)

      Row() {
        CommonButton({
          config: ButtonPresets.secondary(STRINGS.CANCEL, () => {
            this.controller?.close();
          })
        })
        .layoutWeight(1)
        .margin({ right: 8 })

        CommonButton({
          config: ButtonPresets.primary(STRINGS.CONFIRM, () => {
            if (!this.todoName.trim()) {
              promptAction.showToast({ message: 'ËØ∑ËæìÂÖ•ÂæÖÂäûÂêçÁß∞' });
              return;
            }
            this.onConfirm(this.todoName, this.todoType, this.todoDuration);
            this.controller?.close();
          })
        })
        .layoutWeight(1)
        .margin({ left: 8 })
      }
    }
    .padding(24)
    .width(320)
    .backgroundColor(this.currentTheme.backgroundColor)
    .borderRadius(16)
    .border({ 
      width: 0.5, 
      color: this.currentTheme.glassmorphism.accentPrimary + '40' 
    })
    .shadow({
      radius: 25,
      color: this.currentTheme.glassmorphism.accentPrimary + '30',
      offsetX: 0,
      offsetY: 10
    })
  }
}

/**
 * Ê∑ªÂä†ÂæÖÂäûÂêàÈõÜÂØπËØùÊ°Ü - Á≤æÁæéÁâàÊú¨ÔºåÂÖºÂÆπÊóßÊé•Âè£
 */
@CustomDialog
export struct AddCollectionDialog {
  @State collectionTitle: string = '';
  @State collectionDescription: string = '';
  @Prop currentTheme: ThemeConfig;
  controller?: CustomDialogController;
  onConfirm: (title: string, description?: string) => void = () => {};

  build() {
    Column({ space: 20 }) {
      // Ê†áÈ¢òÂå∫Âüü
      Column({ space: 8 }) {
        Text('üìù')
          .fontSize(28)
        Text('Ê∑ªÂä†ÂæÖÂäûÂêàÈõÜ')
          .fontSize(FONT_SIZES.TITLE_MEDIUM)
          .fontWeight(FontWeight.Bold)
          .fontColor(this.currentTheme.textColor)
      }
      .alignItems(HorizontalAlign.Center)

      Column({ space: 16 }) {
        // ÂêàÈõÜÂêçÁß∞ËæìÂÖ•
        Column({ space: 8 }) {
          Text('ÂêàÈõÜÂêçÁß∞ *')
            .fontSize(FONT_SIZES.BODY_SMALL)
            .fontColor(this.currentTheme.glassmorphism.accentPrimary)
            .fontWeight(FontWeight.Medium)
            .alignSelf(ItemAlign.Start)
          
          TextInput({ placeholder: 'ËØ∑ËæìÂÖ•ÂêàÈõÜÂêçÁß∞', text: this.collectionTitle })
            .borderRadius(12)
            .backgroundColor(this.currentTheme.glassmorphism.surfaceLight + 'D0')
            .border({ 
              width: 0.5, 
              color: this.currentTheme.glassmorphism.accentSecondary + '50' 
            })
            .placeholderColor(this.currentTheme.textColor + '60')
            .fontColor(this.currentTheme.textColor)
            .padding(16)
            .height(48)
            .backdropBlur(8)
            .shadow({
              radius: 6,
              color: this.currentTheme.glassmorphism.accentPrimary + '20',
              offsetX: 0,
              offsetY: 2
            })
            .onChange((value: string) => {
              this.collectionTitle = value;
            })
        }
        .alignItems(HorizontalAlign.Start)

        // ÊèèËø∞ËæìÂÖ•ÔºàÂèØÈÄâÔºâ
        Column({ space: 8 }) {
          Text('ÊèèËø∞')
            .fontSize(FONT_SIZES.BODY_SMALL)
            .fontColor(this.currentTheme.glassmorphism.accentSecondary)
            .fontWeight(FontWeight.Medium)
            .alignSelf(ItemAlign.Start)
          
          TextArea({ placeholder: 'ËØ∑ËæìÂÖ•ÂêàÈõÜÊèèËø∞ÔºàÂèØÈÄâÔºâ', text: this.collectionDescription })
            .height(70)
            .borderRadius(12)
            .backgroundColor(this.currentTheme.glassmorphism.surfaceLight + 'D0')
            .border({ 
              width: 0.5, 
              color: this.currentTheme.glassmorphism.accentSecondary + '50' 
            })
            .placeholderColor(this.currentTheme.textColor + '60')
            .fontColor(this.currentTheme.textColor)
            .padding(16)
            .backdropBlur(8)
            .shadow({
              radius: 6,
              color: this.currentTheme.glassmorphism.accentPrimary + '20',
              offsetX: 0,
              offsetY: 2
            })
            .onChange((value: string) => {
              this.collectionDescription = value;
            })
        }
        .alignItems(HorizontalAlign.Start)
      }
      .width('100%')

      // ÊåâÈíÆÂå∫Âüü
      Row({ space: 12 }) {
        CommonButton({
          config: ButtonPresets.secondary(STRINGS.CANCEL, () => {
            this.controller?.close();
          })
        })
        .layoutWeight(1)

        CommonButton({
          config: ButtonPresets.primary(STRINGS.CONFIRM, () => {
            if (!this.collectionTitle.trim()) {
              promptAction.showToast({ message: 'ÂêàÈõÜÂêçÁß∞‰∏çËÉΩ‰∏∫Á©∫' });
              return;
            }
            // ÂêëÂêéÂÖºÂÆπÔºåÂè™‰º†ÈÄíÊ†áÈ¢òÂèÇÊï∞
            this.onConfirm(this.collectionTitle.trim(), this.collectionDescription.trim() || undefined);
            this.controller?.close();
          })
        })
        .layoutWeight(1)
        .enabled(this.collectionTitle.trim().length > 0)
        .opacity(this.collectionTitle.trim().length > 0 ? 1.0 : 0.5)
      }
    }
    .width(340)
    .padding(24)
    .backgroundColor(this.currentTheme.backgroundColor)
    .borderRadius(20)
    .border({ 
      width: 0.5, 
      color: this.currentTheme.glassmorphism.accentPrimary + '40' 
    })
    .shadow({
      radius: 25,
      color: this.currentTheme.glassmorphism.accentPrimary + '30',
      offsetX: 0,
      offsetY: 10
    })
    .backdropBlur(15)
  }
}

/**
 * ÊùÉÈôêËÆæÁΩÆÂØπËØùÊ°Ü
 */
@CustomDialog
export struct PermissionDialog {
  @Prop currentTheme: ThemeConfig;
  controller?: CustomDialogController;
  onConfirm: () => void = () => {};

  build() {
    Column({ space: 20 }) {
      Column() {
        Text('‚öôÔ∏è')
          .fontSize(32)
          .margin({ bottom: 8 })
        Text('ÊùÉÈôêËÆæÁΩÆ')
          .fontSize(FONT_SIZES.TITLE_MEDIUM)
          .fontColor(this.currentTheme.textColor)
          .fontWeight(FontWeight.Bold)
      }
      .alignItems(HorizontalAlign.Center)

      Column({ space: 12 }) {
        Text('ËØ∑Á°Æ‰øù‰ª•‰∏ãÊùÉÈôêÂ∑≤ÂºÄÂêØÔºö')
          .fontSize(FONT_SIZES.BODY_MEDIUM)
          .fontColor(this.currentTheme.textColor)
          .textAlign(TextAlign.Center)

        Column({ space: 8 }) {
          Text('‚Ä¢ ÈÄöÁü•ÊùÉÈôê')
            .fontSize(FONT_SIZES.BODY_SMALL)
            .fontColor(this.currentTheme.textColor)
            .opacity(0.8)
          
          Text('‚Ä¢ ÂêéÂè∞ËøêË°åÊùÉÈôê')
            .fontSize(FONT_SIZES.BODY_SMALL)
            .fontColor(this.currentTheme.textColor)
            .opacity(0.8)
          
          Text('‚Ä¢ Ëá™ÂêØÂä®ÊùÉÈôê')
            .fontSize(FONT_SIZES.BODY_SMALL)
            .fontColor(this.currentTheme.textColor)
            .opacity(0.8)
        }
        .alignItems(HorizontalAlign.Start)
        .width('100%')
      }

      Row() {
        CommonButton({
          config: ButtonPresets.secondary(STRINGS.CANCEL, () => {
            this.controller?.close();
          })
        })
        .layoutWeight(1)
        .margin({ right: 8 })

        CommonButton({
          config: ButtonPresets.primary('ÂéªËÆæÁΩÆ', () => {
            this.onConfirm();
            this.controller?.close();
          })
        })
        .layoutWeight(1)
        .margin({ left: 8 })
      }
    }
    .padding(24)
    .width(320)
    .backgroundColor(this.currentTheme.backgroundColor)
    .borderRadius(16)
    .border({ 
      width: 0.5, 
      color: this.currentTheme.glassmorphism.accentPrimary + '40' 
    })
    .shadow({
      radius: 25,
      color: this.currentTheme.glassmorphism.accentPrimary + '30',
      offsetX: 0,
      offsetY: 10
    })
  }
}

/**
 * Ê∑ªÂä†Â≠ê‰ªªÂä°ÂØπËØùÊ°Ü
 */
@CustomDialog
export struct AddSubTaskDialog {
  @State taskTitle: string = '';
  @State taskDuration: number = 25;
  @Prop currentTheme: ThemeConfig;
  controller?: CustomDialogController;
  onConfirm: (title: string, duration: number) => void = () => {};

  build() {
    Column({ space: 20 }) {
      Text('Ê∑ªÂä†Â≠ê‰ªªÂä°')
        .fontSize(FONT_SIZES.TITLE_MEDIUM)
        .fontColor(this.currentTheme.textColor)
        .fontWeight(FontWeight.Bold)

      TextInput({ placeholder: "ËØ∑ËæìÂÖ•‰ªªÂä°Ê†áÈ¢ò", text: this.taskTitle })
        .onChange(val => this.taskTitle = val)
        .backgroundColor(this.currentTheme.glassmorphism.surfaceLight)
        .borderRadius(12)
        .fontColor(this.currentTheme.textColor)
        .height(48)

      TextInput({ placeholder: "ËØ∑ËæìÂÖ•Êó∂ÈïøÔºàÂàÜÈíüÔºâ", text: this.taskDuration.toString() })
        .type(InputType.Number)
        .onChange(val => this.taskDuration = parseInt(val) || 25)
        .backgroundColor(this.currentTheme.glassmorphism.surfaceLight)
        .borderRadius(12)
        .fontColor(this.currentTheme.textColor)
        .height(48)

      Row() {
        CommonButton({
          config: ButtonPresets.secondary(STRINGS.CANCEL, () => {
            this.controller?.close();
          })
        })
        .layoutWeight(1)
        .margin({ right: 8 })

        CommonButton({
          config: ButtonPresets.primary(STRINGS.CONFIRM, () => {
            if (!this.taskTitle.trim()) {
              promptAction.showToast({ message: 'Ê†áÈ¢ò‰∏çËÉΩ‰∏∫Á©∫' });
              return;
            }
            this.onConfirm(this.taskTitle, this.taskDuration);
            this.controller?.close();
          })
        })
        .layoutWeight(1)
        .margin({ left: 8 })
      }
    }
    .padding(24)
    .width(320)
    .backgroundColor(this.currentTheme.backgroundColor)
    .borderRadius(16)
    .border({ 
      width: 0.5, 
      color: this.currentTheme.glassmorphism.accentPrimary + '40' 
    })
    .shadow({
      radius: 25,
      color: this.currentTheme.glassmorphism.accentPrimary + '30',
      offsetX: 0,
      offsetY: 10
    })
  }
} 